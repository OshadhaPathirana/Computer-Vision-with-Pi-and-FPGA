module uart_tx_f_map
  (
   input        i_Clock,
   input        reset,
   input        i_Tx_DV,
   input  [7:0] i_Tx_Byte,
   output       o_Tx_Active,
   output       o_Tx_Serial,
   output       o_Tx_Done
   );

  parameter CLKS_PER_BIT  = 12;
  typedef enum logic [2:0] {
    s_IDLE         = 3'b000,
    s_TX_START_BIT = 3'b001,
    s_TX_DATA_BITS = 3'b010,
    s_TX_STOP_BIT  = 3'b011,
    s_CLEANUP      = 3'b100
  } state_t;

  state_t      r_SM_Main     = s_IDLE;
  logic [17:0] r_Clock_Count = 0;
  logic [2:0]  r_Bit_Index   = 0;
  logic [7:0]  r_Tx_Data     = 0;
  logic        r_Tx_Done     = 0;
  logic        r_Tx_Active   = 0;
  logic        r_Tx_Serial   = 1'b1;

  always_ff @(posedge i_Clock or posedge reset) begin
    if (reset) begin
      r_SM_Main     <= s_IDLE;
      r_Tx_Serial   <= 1'b1;
      r_Tx_Done     <= 1'b0;
      r_Clock_Count <= 0;
      r_Bit_Index   <= 0;
      r_Tx_Data     <= 0;
      r_Tx_Active   <= 0;
    end else begin
      case (r_SM_Main)
        s_IDLE: begin
          r_Tx_Serial   <= 1'b1;
          r_Tx_Done     <= 1'b0;
          r_Clock_Count <= 0;
          r_Bit_Index   <= 0;
          r_Tx_Data     <= 0;
          r_Tx_Active   <= 0;

          if (i_Tx_DV) begin
            r_Tx_Active <= 1'b1;
            r_Tx_Data   <= i_Tx_Byte;
            r_SM_Main   <= s_TX_START_BIT;
          end
        end

        s_TX_START_BIT: begin
          r_Tx_Serial <= 1'b0;
          if (r_Clock_Count < CLKS_PER_BIT - 1) begin
            r_Clock_Count <= r_Clock_Count + 1;
          end else begin
            r_Clock_Count <= 0;
            r_SM_Main     <= s_TX_DATA_BITS;
          end
        end

        s_TX_DATA_BITS: begin
          r_Tx_Serial <= r_Tx_Data[r_Bit_Index];
          if (r_Clock_Count < CLKS_PER_BIT - 1) begin
            r_Clock_Count <= r_Clock_Count + 1;
          end else begin
            r_Clock_Count <= 0;
            if (r_Bit_Index < 7) begin
              r_Bit_Index <= r_Bit_Index + 1;
            end else begin
              r_Bit_Index <= 0;
              r_SM_Main   <= s_TX_STOP_BIT;
            end
          end
        end

        s_TX_STOP_BIT: begin
          r_Tx_Serial <= 1'b1;
          if (r_Clock_Count < CLKS_PER_BIT - 1) begin
            r_Clock_Count <= r_Clock_Count + 1;
          end else begin
            r_Tx_Done     <= 1'b1;
            r_Clock_Count <= 0;
            r_SM_Main     <= s_CLEANUP;
            r_Tx_Active   <= 1'b0;
          end
        end

        s_CLEANUP: begin
          r_Tx_Done <= 1'b0;
          r_SM_Main <= s_IDLE;
        end
      endcase
    end
  end

  assign o_Tx_Active = r_Tx_Active;
  assign o_Tx_Serial = r_Tx_Serial;
  assign o_Tx_Done   = r_Tx_Done;

endmodule