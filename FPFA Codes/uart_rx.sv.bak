module uart_rx #(
    parameter CLOCK_FREQ = 50000000,
    parameter BAUD_RATE = 115200
)(
    input clk,
    input rst,
    input rx,
    output reg [7:0] data,
    output reg valid
);
    // Calculate the number of clock cycles per bit
    localparam CLOCKS_PER_BIT = CLOCK_FREQ / BAUD_RATE;

    // State machine states
    typedef enum {IDLE, START_BIT, DATA_BITS, STOP_BIT} state_t;
    state_t state;

    reg [15:0] clock_count;
    reg [2:0] bit_index;
    reg [7:0] shift_reg;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            clock_count <= 0;
            bit_index <= 0;
            shift_reg <= 0;
            data <= 0;
            valid <= 0;
        end else begin
            case (state)
                IDLE: begin
                    valid <= 0;
                    if (rx == 0) begin  // Start bit detected
                        state <= START_BIT;
                        clock_count <= 0;
                    end
                end
                START_BIT: begin
                    if (clock_count == (CLOCKS_PER_BIT / 2)) begin
                        if (rx == 0) begin  // Confirm start bit
                            state <= DATA_BITS;
                            clock_count <= 0;
                            bit_index <= 0;
                        end else begin
                            state <= IDLE;
                        end
                    end else begin
                        clock_count <= clock_count + 1;
                    end
                end
                DATA_BITS: begin
                    if (clock_count == CLOCKS_PER_BIT - 1) begin
                        shift_reg[bit_index] <= rx;
                        clock_count <= 0;
                        if (bit_index == 7) begin
                            state <= STOP_BIT;
                        end else begin
                            bit_index <= bit_index + 1;
                        end
                    end else begin
                        clock_count <= clock_count + 1;
                    end
                end
                STOP_BIT: begin
                    if (clock_count == CLOCKS_PER_BIT - 1) begin
                        data <= shift_reg;
                        valid <= 1;
                        state <= IDLE;
                    end else begin
                        clock_count <= clock_count + 1;
                    end
                end
            endcase
        end
    end
endmodule