module sobel_filter (
    input clk,
    input rst,
    input [7:0] pixel_in,
    input pixel_valid,  // Indicates valid pixel input
    output reg [7:0] pixel_out,
    output reg pixel_out_valid  // Indicates valid pixel output
);
    // Line buffers for 3x3 window
    reg [7:0] line_buffer_0 [0:319];  // First row buffer
    reg [7:0] line_buffer_1 [0:319];  // Second row buffer
    reg [7:0] window [0:2][0:2];      // 3x3 pixel window

    // Sobel kernels
    parameter GX [0:2][0:2] = '{
        '{-1, 0, 1},
        '{-2, 0, 2},
        '{-1, 0, 1}
    };
    parameter GY [0:2][0:2] = '{
        '{-1, -2, -1},
        '{0, 0, 0},
        '{1, 2, 1}
    };

    // Shift pixels into the window
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            // Reset buffers and window
            for (int i = 0; i < 320; i = i + 1) begin
                line_buffer_0[i] <= 0;
                line_buffer_1[i] <= 0;
            end
            for (int i = 0; i < 3; i = i + 1) begin
                for (int j = 0; j < 3; j = j + 1) begin
                    window[i][j] <= 0;
                end
            end
        end else if (pixel_valid) begin
            // Shift pixels into the window
            window[0][0] <= window[0][1];
            window[0][1] <= window[0][2];
            window[0][2] <= line_buffer_0[319];
            window[1][0] <= window[1][1];
            window[1][1] <= window[1][2];
            window[1][2] <= line_buffer_1[319];
            window[2][0] <= window[2][1];
            window[2][1] <= window[2][2];
            window[2][2] <= pixel_in;

            // Shift line buffers
            for (int i = 319; i > 0; i = i - 1) begin
                line_buffer_0[i] <= line_buffer_0[i - 1];
                line_buffer_1[i] <= line_buffer_1[i - 1];
            end
            line_buffer_0[0] <= pixel_in;
            line_buffer_1[0] <= line_buffer_0[319];
        end
    end

    // Sobel filter computation
    always @(posedge clk) begin
        if (pixel_valid) begin
            integer gx, gy;
            gx = 0;
            gy = 0;
            for (int i = 0; i < 3; i = i + 1) begin
                for (int j = 0; j < 3; j = j + 1) begin
                    gx = gx + window[i][j] * GX[i][j];
                    gy = gy + window[i][j] * GY[i][j];
                end
            end
            pixel_out <= (gx * gx + gy * gy) > 128 ? 255 : 0;  // Thresholding
            pixel_out_valid <= 1;
        end else begin
            pixel_out_valid <= 0;
        end
    end
endmodule